(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var binaryTree_1 = require("./components/binaryTree");
var node_1 = require("./components/node");
var BT = new binaryTree_1.default();
BT.add(new node_1.default(95));
BT.add(new node_1.default(103));
BT.add(new node_1.default(96));
BT.add(new node_1.default(97));
BT.add(new node_1.default(170));
BT.add(new node_1.default(120));
BT.add(new node_1.default(110));
BT.add(new node_1.default(104));
BT.add(new node_1.default(105));
console.log(JSON.stringify(BT, null, 4));
BT.remove(103);
console.log(JSON.stringify(BT, null, 4));
},{"./components/binaryTree":2,"./components/node":3}],2:[function(require,module,exports){
"use strict";
var BinaryTree = (function () {
    function BinaryTree() {
        this.clear();
    }
    BinaryTree.prototype.add = function (element) {
        var currentElement = this._root;
        if (currentElement === null) {
            this._root = element;
            this._count++;
            return element;
        }
        while (currentElement !== null) {
            if (currentElement.key > element.key) {
                if (currentElement.left === null) {
                    currentElement.left = element;
                    this._count++;
                    break;
                }
                else {
                    currentElement = currentElement.left;
                }
            }
            else if (currentElement.key < element.key) {
                if (currentElement.right === null) {
                    currentElement.right = element;
                    this._count++;
                    break;
                }
                else {
                    currentElement = currentElement.right;
                }
            }
            else {
                console.log("Node -[" + element.key + "]- already exists");
                return;
            }
        }
    };
    BinaryTree.prototype.contains = function (element, tree) {
        if (tree === void 0) { tree = this._root; }
        var isFound = false, currentElement = tree, result = null, parent = null;
        while (currentElement !== null) {
            if (currentElement.key > element) {
                parent = currentElement;
                currentElement = currentElement.left;
            }
            else if (currentElement.key < element) {
                parent = currentElement;
                currentElement = currentElement.right;
            }
            else {
                result = currentElement;
                isFound = true;
                break;
            }
        }
        return { isFound: isFound, result: result, parent: parent };
    };
    BinaryTree.prototype.remove = function (value, tree, isRecursively) {
        if (tree === void 0) { tree = this._root; }
        if (isRecursively === void 0) { isRecursively = false; }
        var searchResult = this.contains(value, tree), parentNode = searchResult.parent, foundNode;
        if (searchResult.isFound) {
            foundNode = searchResult.result;
            if (!isRecursively) {
                this._count--;
            }
            if (foundNode.right === null) {
                if (foundNode.left === null) {
                    // case when node is leaf
                    foundNode.key = null;
                    this.removeNullLeaf(parentNode);
                }
                else {
                    // case if node contains left node
                    var leftNode = foundNode.left;
                    foundNode.key = leftNode.key;
                    foundNode.right = leftNode.right;
                    foundNode.left = leftNode.left;
                }
            }
            else {
                // case if node contains right node
                var leftMost = foundNode.right, parentLeft = null;
                if (leftMost.left !== null) {
                    // case if right child has left node
                    while (leftMost.left !== null) {
                        parentLeft = leftMost;
                        leftMost = leftMost.left;
                    }
                    foundNode.key = leftMost.key;
                    this.remove(leftMost.key, parentLeft, true);
                }
                else {
                    // case if right child doesn't have left node
                    foundNode.key = leftMost.key;
                    foundNode.right = leftMost.right;
                }
            }
        }
        else {
            console.log("Node -[" + value + "]- doesn't exist");
        }
    };
    BinaryTree.prototype.removeNullLeaf = function (tree) {
        if (tree.left && tree.left.key === null) {
            tree.left = null;
        }
        else if (tree.right && tree.right.key === null) {
            tree.right = null;
        }
        return tree;
    };
    BinaryTree.prototype.size = function () {
        return this._count;
    };
    BinaryTree.prototype.clear = function () {
        this._root = null;
        this._count = 0;
    };
    BinaryTree.prototype.min = function () {
        var currentNode = this._root;
        while (currentNode.left && currentNode.left.key !== null) {
            currentNode = currentNode.left;
        }
        return currentNode;
    };
    BinaryTree.prototype.max = function () {
        var currentNode = this._root;
        while (currentNode.right && currentNode.right.key !== null) {
            currentNode = currentNode.right;
        }
        return currentNode;
    };
    return BinaryTree;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BinaryTree;
},{}],3:[function(require,module,exports){
"use strict";
var Node = (function () {
    function Node(key) {
        this.key = key;
        this.left = null;
        this.right = null;
    }
    return Node;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Node;
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXBwLnRzIiwic3JjL2NvbXBvbmVudHMvYmluYXJ5VHJlZS50cyIsInNyYy9jb21wb25lbnRzL25vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUEsMkJBQXVCLHlCQUF5QixDQUFDLENBQUE7QUFDakQscUJBQWlCLG1CQUFtQixDQUFDLENBQUE7QUFFckMsSUFBSSxFQUFFLEdBQUcsSUFBSSxvQkFBVSxFQUFFLENBQUM7QUFFMUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGNBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxjQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksY0FBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGNBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxjQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGNBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxjQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztB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RyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQVZBLEFBVUMsSUFBQTtBQVZEO3NCQVVDLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IEJpbmFyeVRyZWUgZnJvbSBcIi4vY29tcG9uZW50cy9iaW5hcnlUcmVlXCI7XHJcbmltcG9ydCBOb2RlIGZyb20gXCIuL2NvbXBvbmVudHMvbm9kZVwiO1xyXG5cclxubGV0IEJUID0gbmV3IEJpbmFyeVRyZWUoKTtcclxuXHJcbkJULmFkZChuZXcgTm9kZSg5NSkpO1xyXG5CVC5hZGQobmV3IE5vZGUoMTAzKSk7XHJcbkJULmFkZChuZXcgTm9kZSg5NikpO1xyXG5CVC5hZGQobmV3IE5vZGUoOTcpKTtcclxuQlQuYWRkKG5ldyBOb2RlKDE3MCkpO1xyXG5CVC5hZGQobmV3IE5vZGUoMTIwKSk7XHJcbkJULmFkZChuZXcgTm9kZSgxMTApKTtcclxuQlQuYWRkKG5ldyBOb2RlKDEwNCkpO1xyXG5CVC5hZGQobmV3IE5vZGUoMTA1KSk7XHJcblxyXG5jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShCVCwgbnVsbCwgNCkpO1xyXG5cclxuQlQucmVtb3ZlKDEwMyk7XHJcblxyXG5jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShCVCwgbnVsbCwgNCkpOyIsImltcG9ydCBOb2RlIGZyb20gXCIuL25vZGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmFyeVRyZWUge1xyXG4gICAgX3Jvb3Q6IE5vZGU7XHJcbiAgICBfY291bnQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkKGVsZW1lbnQ6IE5vZGUpIHtcclxuICAgICAgICBsZXQgY3VycmVudEVsZW1lbnQgPSB0aGlzLl9yb290O1xyXG4gICAgICAgIGlmIChjdXJyZW50RWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yb290ID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fY291bnQrKztcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQua2V5ID4gZWxlbWVudC5rZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RWxlbWVudC5sZWZ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQubGVmdCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRFbGVtZW50LmtleSA8IGVsZW1lbnQua2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQucmlnaHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudC5yaWdodCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5yaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb2RlIC1bJHtlbGVtZW50LmtleX1dLSBhbHJlYWR5IGV4aXN0c2ApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb250YWlucyhlbGVtZW50OiBOdW1iZXIsIHRyZWU6IE5vZGUgPSB0aGlzLl9yb290KSB7XHJcbiAgICAgICAgbGV0IGlzRm91bmQgPSBmYWxzZSxcclxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSB0cmVlLFxyXG4gICAgICAgICAgICByZXN1bHQgPSBudWxsLFxyXG4gICAgICAgICAgICBwYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQua2V5ID4gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gY3VycmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50LmxlZnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEVsZW1lbnQua2V5IDwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gY3VycmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50LnJpZ2h0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY3VycmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpc0ZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7aXNGb3VuZCwgcmVzdWx0LCBwYXJlbnR9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmUodmFsdWU6IE51bWJlciwgdHJlZTogTm9kZSA9IHRoaXMuX3Jvb3QsIGlzUmVjdXJzaXZlbHk6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBzZWFyY2hSZXN1bHQgPSB0aGlzLmNvbnRhaW5zKHZhbHVlLCB0cmVlKSxcclxuICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHNlYXJjaFJlc3VsdC5wYXJlbnQsXHJcbiAgICAgICAgICAgIGZvdW5kTm9kZTtcclxuICAgICAgICBpZihzZWFyY2hSZXN1bHQuaXNGb3VuZCkge1xyXG4gICAgICAgICAgICBmb3VuZE5vZGUgPSBzZWFyY2hSZXN1bHQucmVzdWx0O1xyXG4gICAgICAgICAgICBpZighaXNSZWN1cnNpdmVseSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY291bnQtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihmb3VuZE5vZGUucmlnaHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmKGZvdW5kTm9kZS5sZWZ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSB3aGVuIG5vZGUgaXMgbGVhZlxyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kTm9kZS5rZXkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTnVsbExlYWYocGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgaWYgbm9kZSBjb250YWlucyBsZWZ0IG5vZGVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGVmdE5vZGUgPSBmb3VuZE5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZE5vZGUua2V5ID0gbGVmdE5vZGUua2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kTm9kZS5yaWdodCA9IGxlZnROb2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kTm9kZS5sZWZ0ID0gbGVmdE5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGNhc2UgaWYgbm9kZSBjb250YWlucyByaWdodCBub2RlXHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdE1vc3QgPSBmb3VuZE5vZGUucmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50TGVmdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdE1vc3QubGVmdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgaWYgcmlnaHQgY2hpbGQgaGFzIGxlZnQgbm9kZVxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKGxlZnRNb3N0LmxlZnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50TGVmdCA9IGxlZnRNb3N0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0TW9zdCA9IGxlZnRNb3N0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kTm9kZS5rZXkgPSBsZWZ0TW9zdC5rZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUobGVmdE1vc3Qua2V5LCBwYXJlbnRMZWZ0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSBpZiByaWdodCBjaGlsZCBkb2Vzbid0IGhhdmUgbGVmdCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmROb2RlLmtleSA9IGxlZnRNb3N0LmtleTtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZE5vZGUucmlnaHQgPSBsZWZ0TW9zdC5yaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb2RlIC1bJHt2YWx1ZX1dLSBkb2Vzbid0IGV4aXN0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlTnVsbExlYWYodHJlZTogTm9kZSkge1xyXG4gICAgICAgIGlmICh0cmVlLmxlZnQgJiYgdHJlZS5sZWZ0LmtleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0cmVlLmxlZnQgPSBudWxsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHJlZS5yaWdodCAmJiB0cmVlLnJpZ2h0LmtleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0cmVlLnJpZ2h0ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRyZWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLl9yb290ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9jb3VudCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1pbigpIHtcclxuICAgICAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLl9yb290O1xyXG4gICAgICAgIHdoaWxlKGN1cnJlbnROb2RlLmxlZnQgJiYgY3VycmVudE5vZGUubGVmdC5rZXkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5sZWZ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VycmVudE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1heCgpIHtcclxuICAgICAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLl9yb290O1xyXG4gICAgICAgIHdoaWxlKGN1cnJlbnROb2RlLnJpZ2h0ICYmIGN1cnJlbnROb2RlLnJpZ2h0LmtleSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VycmVudE5vZGU7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBOb2RlIHtcclxuICAgIGtleTogbnVtYmVyO1xyXG4gICAgbGVmdDogTm9kZTtcclxuICAgIHJpZ2h0OiBOb2RlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGtleTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJpZ2h0ID0gbnVsbDtcclxuICAgIH1cclxufSJdfQ==
