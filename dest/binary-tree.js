(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var binaryTree_1 = require("./components/binaryTree");
var node_1 = require("./components/node");
var BT = new binaryTree_1.default();
BT.add(new node_1.default(33));
BT.add(new node_1.default(5));
BT.add(new node_1.default(35));
BT.add(new node_1.default(1));
BT.add(new node_1.default(20));
BT.add(new node_1.default(99));
BT.add(new node_1.default(4));
BT.add(new node_1.default(17));
BT.add(new node_1.default(31));
console.log(JSON.stringify(BT, null, 4));
BT.remove(5);
BT.remove(99);
BT.remove(33);
console.log(JSON.stringify(BT, null, 4));
},{"./components/binaryTree":2,"./components/node":3}],2:[function(require,module,exports){
"use strict";
var BinaryTree = (function () {
    function BinaryTree() {
        this.clear();
    }
    BinaryTree.prototype.add = function (element) {
        var currentElement = this._root;
        if (currentElement === null) {
            this._root = element;
            this._count++;
            return element;
        }
        while (currentElement !== null) {
            if (currentElement.key > element.key) {
                if (currentElement.left === null) {
                    currentElement.left = element;
                    this._count++;
                    break;
                }
                else {
                    currentElement = currentElement.left;
                }
            }
            else if (currentElement.key < element.key) {
                if (currentElement.right === null) {
                    currentElement.right = element;
                    this._count++;
                    break;
                }
                else {
                    currentElement = currentElement.right;
                }
            }
            else {
                console.log("Node -[" + element.key + "]- already exists");
                return;
            }
        }
    };
    BinaryTree.prototype.contains = function (element, tree) {
        if (tree === void 0) { tree = this._root; }
        var isFound = false, currentElement = tree, result = null, parent = null;
        while (currentElement !== null) {
            if (currentElement.key > element) {
                parent = currentElement;
                currentElement = currentElement.left;
            }
            else if (currentElement.key < element) {
                parent = currentElement;
                currentElement = currentElement.right;
            }
            else {
                result = currentElement;
                isFound = true;
                break;
            }
        }
        return { isFound: isFound, result: result, parent: parent };
    };
    BinaryTree.prototype.remove = function (value, tree, isRecursively) {
        if (tree === void 0) { tree = this._root; }
        if (isRecursively === void 0) { isRecursively = false; }
        var searchResult = this.contains(value, tree), parentNode = searchResult.parent, foundNode;
        if (searchResult.isFound) {
            foundNode = searchResult.result;
            if (!isRecursively) {
                this._count--;
            }
            if (foundNode.right === null) {
                if (foundNode.left === null) {
                    // case when node is leaf
                    foundNode.key = null;
                    this.removeNullLeaf(parentNode);
                }
                else {
                    // case when node doesn't contain right node, buy has left node;
                    var leftNode = foundNode.left;
                    foundNode.key = leftNode.key;
                    foundNode.right = leftNode.right;
                    foundNode.left = leftNode.left;
                }
            }
            else {
                // case if node has right child
                var leftMost = foundNode.right, parentLeft = null;
                if (leftMost.left !== null) {
                    // case if right child has left node
                    while (leftMost.left !== null) {
                        parentLeft = leftMost;
                        leftMost = leftMost.left;
                    }
                    foundNode.key = leftMost.key;
                    this.remove(leftMost.key, parentLeft, true);
                }
                else {
                    // case if right child doesn't have left node
                    foundNode.key = leftMost.key;
                    foundNode.right = leftMost.right;
                }
            }
        }
        else {
            console.log("Node -[" + value + "]- doesn't exist");
        }
    };
    BinaryTree.prototype.removeNullLeaf = function (tree) {
        if (tree.left && tree.left.key === null) {
            tree.left = null;
        }
        else if (tree.right && tree.right.key === null) {
            tree.right = null;
        }
        return tree;
    };
    BinaryTree.prototype.size = function () {
        return this._count;
    };
    BinaryTree.prototype.clear = function () {
        this._root = null;
        this._count = 0;
    };
    BinaryTree.prototype.min = function () {
        var currentNode = this._root;
        while (currentNode.left && currentNode.left.key !== null) {
            currentNode = currentNode.left;
        }
        return currentNode;
    };
    BinaryTree.prototype.max = function () {
        var currentNode = this._root;
        while (currentNode.right && currentNode.right.key !== null) {
            currentNode = currentNode.right;
        }
        return currentNode;
    };
    return BinaryTree;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BinaryTree;
},{}],3:[function(require,module,exports){
"use strict";
var Node = (function () {
    function Node(key) {
        this.key = key;
        this.left = null;
        this.right = null;
    }
    return Node;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Node;
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
